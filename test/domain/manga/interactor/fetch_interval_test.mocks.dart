// Mocks generated by Mockito 5.4.3 from annotations
// in flutteryomi/test/domain/manga/interactor/fetch_interval_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartx/dartx.dart' as _i3;
import 'package:flutteryomi/data/drift/data/chapters.drift.dart' as _i7;
import 'package:flutteryomi/data/drift/data/mangas.drift.dart' as _i6;
import 'package:flutteryomi/domain/chapter/interactor/get_chapters_by_manga_id.dart'
    as _i2;
import 'package:flutteryomi/domain/manga/interactor/fetch_interval.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetChaptersByMangaId_0 extends _i1.SmartFake
    implements _i2.GetChaptersByMangaId {
  _FakeGetChaptersByMangaId_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePair_1<A, B> extends _i1.SmartFake implements _i3.Pair<A, B> {
  _FakePair_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FetchInterval].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchInterval extends _i1.Mock implements _i4.FetchInterval {
  @override
  _i2.GetChaptersByMangaId get getChapterByMangaId => (super.noSuchMethod(
        Invocation.getter(#getChapterByMangaId),
        returnValue: _FakeGetChaptersByMangaId_0(
          this,
          Invocation.getter(#getChapterByMangaId),
        ),
        returnValueForMissingStub: _FakeGetChaptersByMangaId_0(
          this,
          Invocation.getter(#getChapterByMangaId),
        ),
      ) as _i2.GetChaptersByMangaId);

  @override
  _i5.Future<_i6.MangasCompanion?> toMangaUpdateOrNull(
    _i6.Manga? manga,
    DateTime? dateTime,
    _i3.Pair<int, int>? window,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #toMangaUpdateOrNull,
          [
            manga,
            dateTime,
            window,
          ],
        ),
        returnValue: _i5.Future<_i6.MangasCompanion?>.value(),
        returnValueForMissingStub: _i5.Future<_i6.MangasCompanion?>.value(),
      ) as _i5.Future<_i6.MangasCompanion?>);

  @override
  _i3.Pair<int, int> getWindow(DateTime? dateTime) => (super.noSuchMethod(
        Invocation.method(
          #getWindow,
          [dateTime],
        ),
        returnValue: _FakePair_1<int, int>(
          this,
          Invocation.method(
            #getWindow,
            [dateTime],
          ),
        ),
        returnValueForMissingStub: _FakePair_1<int, int>(
          this,
          Invocation.method(
            #getWindow,
            [dateTime],
          ),
        ),
      ) as _i3.Pair<int, int>);

  @override
  int calculateInterval(List<_i7.Chapter>? chapters) => (super.noSuchMethod(
        Invocation.method(
          #calculateInterval,
          [chapters],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}
